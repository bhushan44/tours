const Booking=require("../models/bookings")
const stripe=require("stripe")("sk_test_51PbcTDSIZbr9gJylrHGNSAkBpuaMHW5Y8NATGwD1QXGJ4tiHo46pcWw2bAq5qsX2Ibprwx3JaGLPN4Jf30RpCJK000lYlucTvl"

)
const Tour=require("../models/tourmodel")
async function createBooking(req,res){
    try{
        // console.log(req.user.id,"price")
        // console.log(req.body)
        const check=await Booking.findOne({tour:req.params.tourid})
        console.log(check)
      if(!check){
        const booking=new Booking({
            price:req.params.price,
            user:req.params.userid,
            tour:req.params.tourid
        })
        const result=await booking.save()

      }
       
       res.redirect("http://localhost:3000/bookings")

    }
    catch(e){
        res.json({
            status:"fail",
            message:e.message
        })

    }
 

}
async function getBookings(req,res){
    try{
        const data=await Booking.find({user:req.user.id}).populate("tour")
        res.json({
            message:"success",
            data
        })

    }catch(e){
       res.json({
        status:"file",
        message:e.message

       })
    }
 


}
async function getCheckOutSession(req,res){
    const tour=await Tour.findById(req.params.tourId)
    const session = await stripe.checkout.sessions.create({
        payment_method_types: ['card'],
        success_url: `http://localhost:5000/api/v1/createbooking/${req.user.id}/${req.params.tourId}/${tour.price}`,
        cancel_url: `http://localhost:3000/overview/`,
        client_reference_id: req.params.tourId,
        line_items: [
          {
            price_data: {
              currency: 'usd',
              product_data: {
                name: `${tour.name} tour`,
                description: tour.summary,
              },
              unit_amount: tour.price * 100, // amount in cents
            },
            quantity: 1,
          },
        ],
        mode: 'payment', // Specify the mode (payment, setup, or subscription)
      });
    //   const check=await Booking.findOne({tour:req.body.tour})
      
res.json({
    status:"success",
    session
})

}
module.exports={createBooking,getBookings,getCheckOutSession}